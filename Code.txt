import React, { useReducer } from "react";

// Initial state
const initialState = {
  username: "",
  email: "",
  password: "",
  errors: {},
  isSubmitting: false,
};

// Reducer function
function formReducer(state, action) {
  switch (action.type) {
    case "FIELD_CHANGE":
      return {
        ...state,
        [action.field]: action.value,
        errors: {
          ...state.errors,
          [action.field]: "", // clear error when user types
        },
      };
    case "VALIDATION_ERROR":
      return {
        ...state,
        errors: action.errors,
        isSubmitting: false,
      };
    case "SUBMIT_START":
      return { ...state, isSubmitting: true };
    case "SUBMIT_SUCCESS":
      return { ...state, isSubmitting: false, username: "", email: "", password: "" };
    default:
      return state;
  }
}

function App() {
  const [state, dispatch] = useReducer(formReducer, initialState);

  const handleChange = (field, value) => {
    dispatch({ type: "FIELD_CHANGE", field, value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    dispatch({ type: "SUBMIT_START" });

    // Validation
    const errors = {};
    if (!state.username.trim()) errors.username = "Username is required";
    if (!state.email.trim()) errors.email = "Email is required";
    if (!state.password.trim()) errors.password = "Password is required";

    if (Object.keys(errors).length > 0) {
      dispatch({ type: "VALIDATION_ERROR", errors });
      return;
    }

    try {
      // Simulate API request
      await new Promise((resolve) => setTimeout(resolve, 1500));
      alert("Registration successful!");
      dispatch({ type: "SUBMIT_SUCCESS" });
    } catch (err) {
      dispatch({
        type: "VALIDATION_ERROR",
        errors: { general: "Something went wrong. Try again." },
      });
    }
  };

  return (
    <div style={{ maxWidth: "400px", margin: "50px auto" }}>
      <h2>Register</h2>
      <form onSubmit={handleSubmit}>
        {/* Username */}
        <input
          type="text"
          placeholder="Username"
          value={state.username}
          onChange={(e) => handleChange("username", e.target.value)}
        />
        {state.errors.username && (
          <p style={{ color: "red" }}>{state.errors.username}</p>
        )}

        {/* Email */}
        <input
          type="email"
          placeholder="Email"
          value={state.email}
          onChange={(e) => handleChange("email", e.target.value)}
        />
        {state.errors.email && (
          <p style={{ color: "red" }}>{state.errors.email}</p>
        )}

        {/* Password */}
        <input
          type="password"
          placeholder="Password"
          value={state.password}
          onChange={(e) => handleChange("password", e.target.value)}
        />

        {state.errors.password && (
          <p style={{ color: "red" }}>{state.errors.password}</p>
        )}

        {/* General error */}
        {state.errors.general && (
          <p style={{ color: "red" }}>{state.errors.general}</p>
        )}

        <button type="submit" disabled={state.isSubmitting}>
          {state.isSubmitting ? "Registering..." : "Register"}
        </button>
      </form>
    </div>
  );
}

export default App;
